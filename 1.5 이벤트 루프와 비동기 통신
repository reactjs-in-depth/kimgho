## 먼저 알아야 할 정보
__프로세스(Process)__
> 메모리상에서 실행되는 작업 단위

__스레드(Thread)__
> 프로세스보다 더 작은 실행 단위

__Javascript는 싱글 스레드 언어다.__
> 한번에 하나의 작업만 수행이 가능하다.

__동기(Synchronous)__
> 직렬 방식으로 작업을 처리한다.
 이는 어떤 요청을 동기로 진행한다면 해당 요청의 응답을 받아야만 다음 작업을 할 수 있다.

__비동기(Asynchoronous)__
> 병렬 방식으로 작업을 처리한다.
 이는 어떤 요청을 비동기로 진행한다면 해당 요청의 응답이 오건 말건 상관없이 다음 작업을 수행할 수 있다.

__스택(Stack)__
>자료구조 중 하나로 후입선출(Last-In-First-Out, LIFO) 방식이다
즉, 가장 늦게 들어온 것이 가장 먼저 나간다.

__큐(Queue)__
>자료구조 중 하나로 선입선출(Frist-In-First-Out, FIFO)방식이다.
즉, 가장 먼저 들어온 것이 가장 먼저 나간다.

__셋(set)__
>자료구조 중 하나로, 데이터의 중복을 허용하지 않는다.

__콜백(Callback)__
>다른 함수가 실행을 끝낸 뒤 실행하는 함수

---

## 싱글 스레드 자바스크립트
### 자바스크립트의 탄생 배경
자바스크립트는 1995년경 첫선을 보였는데, 이 당시에는 멀티 스레드에 대한 개념이 널리 알려진 시기가 아니었다.
>2002년 출시된 인텔의 펜티엄4가 최초의 동시 멀티스레딩을 구현한 데스크톱

넷스케이프 개발자 브렌던 아이크(Brendan Eich)가 브라우저에서 간단한 스크립트를 지원할 목적으로 LiveScript를 만들었던 것이 시작이다.

여러 언어를 참고하여 10일만에 첫 버전이 완성된 만큼 단순한 수준에서 제한적으로 사용됐다.

~~지금처럼 자바스크립트를 개지랄나게 쓸거라곤 생각을 못했을거다.~~

만약 자바스크립트가 멀티 스레딩을 지원해서 동시에 여러 스레드가 DOM을 조작한다면?
> 멀티 스레드 환경은 고려해야할 사항이 굉장히 많다.
운영체제를 공부해봤다면 다들 익히 들었을 데드락,안정성 문제나 동기화로 인한 성능 저하, Context Switching Overhead 등..
DOM표시에 굉장히 큰 문제를 야기할 수 있다.

### 그럼 어떻게 동작하는가?
코드의 실행이 하나의 스레드에서 순차적으로 이루어진다.
이는 곧 한 줄씩 실행한다는 것이고 하나의 작업이 끝날 때 까지 절대 다음 작업은 실행되지 않는다.
이런 특징을 **"Run-to-completion"**이라고 한다

>물론 Node.js에서 새롭게 추가된 Worker나 WebWorker를 활용하면 동시에 여러 작업을 처리할 수 있다.

이러한 특징은 개발자에게 동시성을 고민할 필요가 없다는 장점이 있지만, 때에 따라 웹페이지에서 치명적으로 작용할 수 있다.
>웹페이지를 이용할 때, 로그인 처리가 오래 걸린다면 사용자는 답답해 죽을것이다.

```javascript
console.log(1)

setTimeout(()=>{
    console.log(2)
},0)

setTimeout(()=>{
    console.log(3)
},100)

console.log(4)
```
이 코드를 본 자바스크립트 개발자라면 1,4,2,3으로 나타난다고 생각할 것이다.
> 엥? 앞에선 한 줄씩 처리한다면서
그럼 1,2,3,4 이렇게 나와야 하는거 아님?

이를 이해하기 위해서 **이벤트 루프**라는 개념을 이해해야 한다.

---
## 이벤트 루프
우선 책(모던 리액트 딥다이브)은 V8엔진을 기준으로 작성되었다.
이벤트 루프는 ECMAScript의 표준이 아니라 자바스크립트 런타임 외부에서 자바스크립트의 비동기 실행을 돕기 위해 만들어진 장치라 볼 수 있다.

### 호출 스택(Call Stack)
자바스크립트에서 수행해야 할 코드나 함수를 순차적으로 담아두는 스택이다.

다음 코드를 보자.
```javascript
function bar() {
  console.log("bar");
}
function baz() {
  console.log("baz");
}

function foo() {
  console.log("foo");
  bar();
  baz();
}
foo();
```
결과는 foo,bar,baz
<details>
<summary>호출 스택 순서</summary>
<div markdown="1">
  <p>1.foo()가 호출되어 먼저 스택으로 들어간다.</p>
  <p>2.foo()안에 console.log()가 존재하므로 호출 스택에 들어간다.</p>
  <p>3.2의 실행이 완료된 이후 다음 코드로 넘어간다(아직 foo()는 존재)</p>
  <p>4.bar()가 호출 스택에 들어간다</p>
  <p>5.bar()안에 console.log()가 존재하므로 호출 스택에 들어간다</p>
  <p>6.5의 실행이 완료된 이후 다음 코드로 넘어간다.(아직 foo(),bar()는 존재)</p>
  <p>7.더 이상 bar()에 남은 것이 없으므로 호출 스택에서 제거된다.(아직foo()는 존재)</p>
  <p>8.baz()가 호출 스택에 들어간다</p>
  <p>9.baz()내부에 console.log()가 존재하므로 호출 스택에 들어간다</p>
  <p>10.9의 실행이 완료된 이후 다음 코드로 넘어간다. (아직 foo(),baz()는 존재)</p>
  <p>11.더 이상 baz()에 남은 것이 없으므로 호출 스택에서 제거된다.(아직 foo()는 존재)</p>
  <p>12.더 이상 foo()에 남은 것이 없으므로 호출 스택에서 제거된다.</p>
  <p>13.이제 호출 스택이 완전히 비었다.</p>
</div>
</details>

호출 스택이 비어 있는지 확인하는 것이 바로 **이벤트 루프**다.
이벤트 루프는 호출 스택 내부에 수행해야 할 작업이 있는지 확인 후, 코드가 있다면 실행한다.
여기서 알아야 할것은 **"코드를 실행하는 것"** 과 __"호출 스택이 비어있는지 확인하는 것"__ 모두가 단일 스레드에서 일어난다.

즉, 두 작업은 동시에 일어날 수 없으며, 순차적으로 일어난다.


그럼 비동기 작업은 어떻게 실행될까?
```javascript
function bar() {
  console.log("bar");
}
function baz() {
  console.log("baz");
}

function foo() {
  console.log("foo");
  setTimeout(() => { // 변경점
    bar();
  }, 0);
  baz();
}
foo();
```
이전 코드와 달라진게 있다면 foo()안에 setTimeout에 bar()를 넘겨줬다.
결과는 foo,baz,bar

<details>
<summary>호출 스택 순서</summary>
<div markdown="1">
  <p>1.foo()가 호출되어 먼저 스택으로 들어간다.</p>
  <p>2.foo()안에 console.log()가 존재하므로 호출 스택에 들어간다.</p>
  <p>3.2의 실행이 완료된 이후 다음 코드로 넘어간다(아직 foo()는 존재)</p>
  <p>4.setTimeout(bar(),0)이 호출 스택에 들어간다.</p>
  <p>5.4에 대해 타이머 이벤트가 실행되며 태스크 큐로 들어가고 바로 스택에서 제거된다.</p>
  <p>6.baz()가 호출 스택에 들어간다.</p>
  <p>7.baz()내부에 console.log()가 존재하므로 호출 스택에 들어간다. </p>
  <p>8.7의 실행이 완료된 이후 다음 코드로 넘어간다(아직 foo(),baz()는 존재)</p>
  <p>9.더이상 baz()에 남은 것이 없으므로 호출 스택에서 제거된다. 아직(foo()는 존재)</p>
  <p>10.더이상 foo()에 남은 것이 없으므로 호출 스택에서 제거된다.</p>
  <p>11.이제 호출 스택이 완전히 비었다.</p>
  <p>12.이벤트 루프가 호출 스택이 비워져있는것을 확인, 태스크 큐를 확인하니 4번에 들어간 내용이 있어 bar()를 호출 스택에 들여보낸다.</p>
  <p>13.bar()내부에 console.log()가 존재하므로 호출 스택에 들어간다.</p>
  <p>14.13의 실행이 끝나고 다음 코드로 넘어간다.(아직 bar()존재)</p>
  <p>15.더이상 bar()에 남은 것이 없으므로 호출 스택에서 제거된다.</p>
</div>
</details>

호출 스택 순서를 봤다면 새로운 단어가 있다.
바로 **태스크 큐(Task Queue)**다.

---

## 태스크 큐와 마이크로 태스크 큐
### 태스크 큐
실행해야 할 태스크의 집합을 의미한다.
이벤트 루프는 이러한 태스크 큐를 1개 이상 가지고 있다.
하지만, 태스크 큐라는 이름과 다르게 Queue 구조가 아닌, set구조를 가지고 있다.
>가장 오래된 태스크를 가져와야 하기 때문이다.

실행해야 할 "태스크"의 집합이라고 했는데, 여기서 말하는 태스크란, **비동기 함수의 콜백 함수나 이벤트 핸들러 등"**을 의미한다.

앞서 말한 이벤트 루프의 역할은 호출 스택에 실행 중인 코드가 있는지, 태스크 큐에 대기 중인 함수가 있는지 반복해서 확인하는 역할이다.

만약 호출 스택이 비어있다면 태스크 큐에 대기 중인 함수가 있는지 확인하고, 이 작업을 실행 가능한 오래된 것부터 순차적으로 꺼내와서 실행하게 된다. 
이 역시 태스크 큐가 빌 때 까지 이뤄진다.

**그럼 비동기 함수는 누가 수행할까?**

이는 모두 자바스크립트 코드가 동기식으로 실행되는 메인 스레드가 아닌 태스크 큐가 할당되는 별도의 스레드에서 수행된다.
그리고 이 별도의 스레드에서 태스크 큐에 작업을 할당해 처리하는 것은 브라우저나 Node.js의 역할이다.

한 마디로 자바스크립트 코드 실행은 싱글 스레드에서 이루어지지만 이러한 외부 Web API등은 모두 자바스크립트 코드 외부에서 실행되고 콜백이 태스크 큐로 들어가는 것이다.

이벤트 루프는 호출 스택이 비고, 콜백이 실행 가능한 때가 오면 꺼내서 수행하는 역할을 하는 것이다.

### 마이크로 태스크 큐
앞서 이벤트 루프는 태스크 큐를 1개 이상 가지고 있다 했는데, 마이크로 태스크 큐 또한 1개를 갖고있다.
이때 마이크로 태스크 큐는 기존의 태스크 큐와 다른 태스크를 처리한다.

대표적으로 ```Promise```가 있다.
이때 마이크로 태스크 큐는 태스크 큐보다 우선권을 갖는다.
>즉 ```Promise```는 ```setTimeout```이나 ```setInterval```보다 먼저 실행된다
마이크로 태스크 큐가 빌 때까지는 태스크 큐의 실행은 당연히 늦어진다.
[참고:명세](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)

다음 코드를 보자.
```javascript
function bar() {
  console.log("bar");
}
function baz() {
  console.log("baz");
}

function foo() {
  console.log("foo");
  bar();
  baz();
}
setTimeout(() => {
  foo();
}, 0);

Promise.resolve().then(bar()).then(baz());
```
코드를 보면 setTimeout에 foo()를 콜백으로 줬다.
그렇다면 foo()는 태스크 큐에 들어간다.
하지만 Promise로 준 bar()와 baz()는 마이크로 태스크 큐에 들어가게 된다.
그렇다면 결과는 bar->baz->foo->bar->baz가 된다
- 태스크 큐: setTimeout, setInterval, setImmediate
- 마이크로 태스크 큐: process.nextTick,Promises, queueMicroTask,MutationObserver

그럼 프론트에서 중요한 렌더링은 언제 실행될까?
태스크 큐를 실행하기 앞서 먼저 마이크로 태스크 큐를 실행하고, 이것을 실행한 뒤 렌더링이 일어난다.
즉, 마이크로 태스크 큐 작업이 끝날 때마다 렌더링할 기회를 얻는다.

토글에 있는 코드를 실행해보자.
<details>
  <summary>렌더링 순서 코드</summary>

  ```html
  <html>
    <body>
      <ul>
        <li>동기:<button id="sync">0</button></li>
        <li>태스크:<button id="macrotask">0</button></li>
        <li>마이크로 태스크:<button id="microtask">0</button></li>
      </ul>
      <button id="macro_micro">모두 동시</button>
    </body>
    <script>
      const button = document.getElementById("run");
      const sync = document.getElementById("sync");
      const macrotask = document.getElementById("macrotask");
      const microtask = document.getElementById("microtask");
      const macro_micro = document.getElementById("macro_micro");

      sync.addEventListener("click", function () {
        for (let i = 0; i < 100000; i++) {
          sync.innerHTML = i;
        }
      });
      macrotask.addEventListener("click", function () {
        for (let i = 0; i < 100000; i++) {
          setTimeout(() => {
            macrotask.innerHTML = i;
          });
        }
      });
      microtask.addEventListener("click", function () {
        for (let i = 0; i < 100000; i++) {
          queueMicrotask(() => {
            microtask.innerHTML = i;
          });
        }
      });
      macro_micro.addEventListener("click", function () {
        for (let i = 0; i < 100000; i++) {
          sync.innerHTML = i;
          setTimeout(() => {
            macrotask.innerHTML = i;
          }, 0);
          queueMicrotask(() => {
            microtask.innerHTML = i;
          });
        }
      });
    </script>
  </html>
```
</details>

- 실행 결과는 sync와 microtask는 for문이 끝나고 나서 99999라는 숫자가 한번에 나온다.
- macrotask는 모든 setTimeout 콜백이 큐에 들어가기 전까지 대기 시간을 갖다가 순차적으로 렌더링된다.
- 모든 것을 동시에 실행한 경우, macrotask만 순차적으로 올라가고 나머진 한번에 나온다.

[참고:이벤트 루프와 비동기](https://inpa.tistory.com/entry/%F0%9F%94%84-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EA%B5%AC%EC%A1%B0-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC)
